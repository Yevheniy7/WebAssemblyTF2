@page "/identify"
@using System.Collections.Generic
@using BlazorInputFile
@using BlazorClient.Data


<div class="container">
    <h1>Identify image</h1>

    <p>
        This component allows sending an image to run the image recognition model.
        Select an image to start the upload and recognition process.
    </p>
    <form>
        <InputFile multiple OnChange="OnImageFileSelected" accept="image/*" />
    </form>

    <div class="row my-4">
        @foreach (var image in selectedImages)
        {
            <div class="col-4">
                <IdentifyImage @key="image" Image="image" OnClear="OnClear" />
            </div>
        }
    </div>
</div>


@code {
    // List<IFileListEntry> selectedImages = new List<IFileListEntry>();

    //  void OnImageFileSelected(IFileListEntry[] files)
    //   {
    //      selectedImages.AddRange(files);
    //  }



    /*  IReadOnlyList<IBrowserFile> selectedImages;

      void OnImageFileSelected(InputFileChangeEventArgs eventArgs)
      {
          const int MaxAllowedFiles = 5;
          selectedImages = eventArgs.GetMultipleFiles(MaxAllowedFiles);
      }
    */




    List<SelectedImage> selectedImages = new List<SelectedImage>();

    void OnImageFileSelected(IFileListEntry[] files)
    {
        selectedImages.AddRange(
          files.Select(f => new SelectedImage(f)));
    }



    void OnClear(SelectedImage image)
    {
        selectedImages.Remove(image);
    }















    /*

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                Console.WriteLine("File: {Filename} Error: {Error}",
                file.Name, ex.Message);
            }
        }

        isLoading = false;
    }




*/

}
